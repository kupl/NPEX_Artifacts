    public double getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D)
    {
        org.apache.commons.math3.geometry.euclidean.threed.Line this;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D point, $r0, $r1, $r2;
        double $d0;

        this := @this: org.apache.commons.math3.geometry.euclidean.threed.Line;

        point := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.Vector3D;

        $r0 = this.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero>;

        if point != null goto label1;

        return 0.0;

     label1:
        $r1 = virtualinvoke point.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector)>($r0);

        $r2 = this.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction>;

        $d0 = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Vector3D: double dotProduct(org.apache.commons.math3.geometry.Vector)>($r2);

        return $d0;
    }
