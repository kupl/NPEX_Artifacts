    public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.SubLine, boolean)
    {
        org.apache.commons.math3.geometry.euclidean.threed.SubLine this, subLine;
        boolean includeEndPoints;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D v1D, $r12, $r13;
        org.apache.commons.math3.geometry.partitioning.Region$Location loc1, loc2, $r8, $r9, $r10, $r11;
        org.apache.commons.math3.geometry.euclidean.threed.Line $r0, $r1, $r2, $r5;
        org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet $r3, $r6;
        org.apache.commons.math3.geometry.euclidean.oned.Vector1D $r4, $r7;

        this := @this: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        subLine := @parameter0: org.apache.commons.math3.geometry.euclidean.threed.SubLine;

        includeEndPoints := @parameter1: boolean;

        $r1 = this.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r0 = subLine.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        v1D = virtualinvoke $r1.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line)>($r0);

        $r3 = this.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion>;

        $r2 = this.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r4 = virtualinvoke $r2.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector)>(v1D);

        loc1 = virtualinvoke $r3.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Vector)>($r4);

        $r6 = subLine.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet remainingRegion>;

        $r5 = subLine.<org.apache.commons.math3.geometry.euclidean.threed.SubLine: org.apache.commons.math3.geometry.euclidean.threed.Line line>;

        $r7 = virtualinvoke $r5.<org.apache.commons.math3.geometry.euclidean.threed.Line: org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector)>(v1D);

        loc2 = virtualinvoke $r6.<org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet: org.apache.commons.math3.geometry.partitioning.Region$Location checkPoint(org.apache.commons.math3.geometry.Vector)>($r7);

        if includeEndPoints == 0 goto label3;

        $r10 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if loc1 == $r10 goto label1;

        $r11 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location OUTSIDE>;

        if loc2 == $r11 goto label1;

        $r12 = v1D;

        goto label2;

     label1:
        $r12 = null;

     label2:
        return $r12;

     label3:
        $r8 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if loc1 != $r8 goto label4;

        $r9 = <org.apache.commons.math3.geometry.partitioning.Region$Location: org.apache.commons.math3.geometry.partitioning.Region$Location INSIDE>;

        if loc2 != $r9 goto label4;

        $r13 = v1D;

        goto label5;

     label4:
        $r13 = null;

     label5:
        return $r13;
    }
