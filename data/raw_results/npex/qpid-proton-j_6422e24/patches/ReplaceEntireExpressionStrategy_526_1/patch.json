{
    "contents": "if (((((((!delivery.isDone()) && ((delivery.getDataLength() > 0) || (delivery != snd.current()))) && (tpSession != null ? tpSession.hasOutgoingCredit() : true)) && tpLink.hasCredit()) && tpSession.isLocalChannelSet()) && (tpLink.getLocalHandle() != null)) && (!_frameWriter.isFull())) {\n    org.apache.qpid.proton.engine.impl.DeliveryImpl inProgress = tpLink.getInProgressDelivery();\n    if (inProgress != null) {\n        // There is an existing Delivery awaiting completion. Check it\n        // is the same Delivery object given and return if not, as we\n        // can't interleave Transfer frames for deliveries on a link.\n        if (inProgress != delivery) {\n            return false;\n        }\n    }\n    org.apache.qpid.proton.amqp.UnsignedInteger deliveryId = tpSession.getOutgoingDeliveryId();\n    org.apache.qpid.proton.engine.impl.TransportDelivery tpDelivery = new org.apache.qpid.proton.engine.impl.TransportDelivery(deliveryId, delivery, tpLink);\n    delivery.setTransportDelivery(tpDelivery);\n    final org.apache.qpid.proton.amqp.transport.Transfer transfer = new org.apache.qpid.proton.amqp.transport.Transfer();\n    transfer.setDeliveryId(deliveryId);\n    transfer.setDeliveryTag(new org.apache.qpid.proton.amqp.Binary(delivery.getTag()));\n    transfer.setHandle(tpLink.getLocalHandle());\n    if (delivery.getLocalState() != null) {\n        transfer.setState(delivery.getLocalState());\n    }\n    if (delivery.isSettled()) {\n        transfer.setSettled(java.lang.Boolean.TRUE);\n    } else {\n        tpSession.addUnsettledOutgoing(deliveryId, delivery);\n    }\n    if (snd.current() == delivery) {\n        transfer.setMore(true);\n    }\n    int messageFormat = delivery.getMessageFormat();\n    if (messageFormat == org.apache.qpid.proton.engine.impl.DeliveryImpl.DEFAULT_MESSAGE_FORMAT) {\n        transfer.setMessageFormat(org.apache.qpid.proton.amqp.UnsignedInteger.ZERO);\n    } else {\n        transfer.setMessageFormat(org.apache.qpid.proton.amqp.UnsignedInteger.valueOf(messageFormat));\n    }\n    java.nio.ByteBuffer payload = (delivery.getData() == null) ? null : java.nio.ByteBuffer.wrap(delivery.getData(), delivery.getDataOffset(), delivery.getDataLength());\n    writeFrame(tpSession.getLocalChannel(), transfer, payload, new org.apache.qpid.proton.engine.impl.TransportImpl.PartialTransfer(transfer));\n    tpSession.incrementOutgoingId();\n    tpSession.decrementRemoteIncomingWindow();\n    if ((payload == null) || (!payload.hasRemaining())) {\n        session.incrementOutgoingBytes(-delivery.pending());\n        delivery.setData(null);\n        delivery.setDataLength(0);\n        if (!transfer.getMore()) {\n            // Clear the in-progress delivery marker\n            tpLink.setInProgressDelivery(null);\n            delivery.setDone();\n            tpLink.setDeliveryCount(tpLink.getDeliveryCount().add(org.apache.qpid.proton.amqp.UnsignedInteger.ONE));\n            tpLink.setLinkCredit(tpLink.getLinkCredit().subtract(org.apache.qpid.proton.amqp.UnsignedInteger.ONE));\n            tpSession.incrementOutgoingDeliveryId();\n            session.incrementOutgoingDeliveries(-1);\n            snd.decrementQueued();\n        }\n    } else {\n        int delta = delivery.getDataLength() - payload.remaining();\n        delivery.setDataOffset(delivery.getDataOffset() + delta);\n        delivery.setDataLength(payload.remaining());\n        session.incrementOutgoingBytes(-delta);\n        // Remember the delivery we are still processing\n        // the body transfer frames for\n        tpLink.setInProgressDelivery(delivery);\n    }\n    if (snd.getLocalState() != org.apache.qpid.proton.engine.EndpointState.CLOSED) {\n        getConnectionImpl().put(org.apache.qpid.proton.engine.Event.Type.LINK_FLOW, snd);\n    }\n}",
    "original_filepath": "proton-j/src/main/java/org/apache/qpid/proton/engine/impl/TransportImpl.java",
    "patched_lines": [521]
}