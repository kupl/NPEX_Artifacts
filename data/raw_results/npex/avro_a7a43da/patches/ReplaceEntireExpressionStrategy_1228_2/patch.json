{
    "contents": "if (schema != null ? schema.isTextual() : false) {\n    // name\n    org.apache.avro.Schema result = names.get(schema.getTextValue());\n    if (result == null) {\n        throw new org.apache.avro.SchemaParseException(\"Undefined name: \" + schema);\n    }\n    return result;\n} else if (schema.isObject()) {\n    org.apache.avro.Schema result;\n    java.lang.String type = org.apache.avro.Schema.getRequiredText(schema, \"type\", \"No type\");\n    org.apache.avro.Schema.Name name = null;\n    java.lang.String savedSpace = names.space();\n    java.lang.String doc = null;\n    if (((type.equals(\"record\") || type.equals(\"error\")) || type.equals(\"enum\")) || type.equals(\"fixed\")) {\n        java.lang.String space = org.apache.avro.Schema.getOptionalText(schema, \"namespace\");\n        doc = org.apache.avro.Schema.getOptionalText(schema, \"doc\");\n        if (space == null) {\n            space = names.space();\n        }\n        name = new org.apache.avro.Schema.Name(org.apache.avro.Schema.getRequiredText(schema, \"name\", \"No name in schema\"), space);\n        if (name.space != null) {\n            // set default namespace\n            names.space(name.space);\n        }\n    }\n    if (org.apache.avro.Schema.PRIMITIVES.containsKey(type)) {\n        // primitive\n        result = org.apache.avro.Schema.create(org.apache.avro.Schema.PRIMITIVES.get(type));\n    } else if (type.equals(\"record\") || type.equals(\"error\")) {\n        // record\n        java.util.List<org.apache.avro.Schema.Field> fields = new java.util.ArrayList<>();\n        result = new org.apache.avro.Schema.RecordSchema(name, doc, type.equals(\"error\"));\n        if (name != null) {\n            names.add(result);\n        }\n        org.codehaus.jackson.JsonNode fieldsNode = schema.get(\"fields\");\n        if ((fieldsNode == null) || (!fieldsNode.isArray())) {\n            throw new org.apache.avro.SchemaParseException(\"Record has no fields: \" + schema);\n        }\n        for (org.codehaus.jackson.JsonNode field : fieldsNode) {\n            java.lang.String fieldName = org.apache.avro.Schema.getRequiredText(field, \"name\", \"No field name\");\n            java.lang.String fieldDoc = org.apache.avro.Schema.getOptionalText(field, \"doc\");\n            org.codehaus.jackson.JsonNode fieldTypeNode = field.get(\"type\");\n            if (fieldTypeNode == null) {\n                throw new org.apache.avro.SchemaParseException(\"No field type: \" + field);\n            }\n            if (fieldTypeNode.isTextual() && (names.get(fieldTypeNode.getTextValue()) == null)) {\n                throw new org.apache.avro.SchemaParseException(((((fieldTypeNode + \" is not a defined name.\") + \" The type of the \\\"\") + fieldName) + \"\\\" field must be\") + \" a defined name or a {\\\"type\\\": ...} expression.\");\n            }\n            org.apache.avro.Schema fieldSchema = org.apache.avro.Schema.parse(fieldTypeNode, names);\n            org.apache.avro.Schema.Field.Order order = org.apache.avro.Schema.Field.Order.ASCENDING;\n            org.codehaus.jackson.JsonNode orderNode = field.get(\"order\");\n            if (orderNode != null) {\n                order = org.apache.avro.Schema.Field.Order.valueOf(orderNode.getTextValue().toUpperCase(java.util.Locale.ENGLISH));\n            }\n            org.codehaus.jackson.JsonNode defaultValue = field.get(\"default\");\n            if (((defaultValue != null) && (org.apache.avro.Schema.Type.FLOAT.equals(fieldSchema.getType()) || org.apache.avro.Schema.Type.DOUBLE.equals(fieldSchema.getType()))) && defaultValue.isTextual()) {\n                defaultValue = new org.codehaus.jackson.node.DoubleNode(java.lang.Double.valueOf(defaultValue.getTextValue()));\n            }\n            org.apache.avro.Schema.Field f = new org.apache.avro.Schema.Field(fieldName, fieldSchema, fieldDoc, defaultValue, order);\n            java.util.Iterator<java.lang.String> i = field.getFieldNames();\n            while (i.hasNext()) {\n                // add field props\n                java.lang.String prop = i.next();\n                if (!org.apache.avro.Schema.FIELD_RESERVED.contains(prop)) {\n                    f.addProp(prop, field.get(prop));\n                }\n            } \n            f.aliases = org.apache.avro.Schema.parseAliases(field);\n            fields.add(f);\n        }\n        result.setFields(fields);\n    } else if (type.equals(\"enum\")) {\n        // enum\n        org.codehaus.jackson.JsonNode symbolsNode = schema.get(\"symbols\");\n        if ((symbolsNode == null) || (!symbolsNode.isArray())) {\n            throw new org.apache.avro.SchemaParseException(\"Enum has no symbols: \" + schema);\n        }\n        org.apache.avro.Schema.LockableArrayList<java.lang.String> symbols = new org.apache.avro.Schema.LockableArrayList<>(symbolsNode.size());\n        for (org.codehaus.jackson.JsonNode n : symbolsNode) {\n            symbols.add(n.getTextValue());\n        }\n        result = new org.apache.avro.Schema.EnumSchema(name, doc, symbols);\n        if (name != null) {\n            names.add(result);\n        }\n    } else if (type.equals(\"array\")) {\n        // array\n        org.codehaus.jackson.JsonNode itemsNode = schema.get(\"items\");\n        if (itemsNode == null) {\n            throw new org.apache.avro.SchemaParseException(\"Array has no items type: \" + schema);\n        }\n        result = new org.apache.avro.Schema.ArraySchema(org.apache.avro.Schema.parse(itemsNode, names));\n    } else if (type.equals(\"map\")) {\n        // map\n        org.codehaus.jackson.JsonNode valuesNode = schema.get(\"values\");\n        if (valuesNode == null) {\n            throw new org.apache.avro.SchemaParseException(\"Map has no values type: \" + schema);\n        }\n        result = new org.apache.avro.Schema.MapSchema(org.apache.avro.Schema.parse(valuesNode, names));\n    } else if (type.equals(\"fixed\")) {\n        // fixed\n        org.codehaus.jackson.JsonNode sizeNode = schema.get(\"size\");\n        if ((sizeNode == null) || (!sizeNode.isInt())) {\n            throw new org.apache.avro.SchemaParseException(\"Invalid or no size: \" + schema);\n        }\n        result = new org.apache.avro.Schema.FixedSchema(name, doc, sizeNode.getIntValue());\n        if (name != null) {\n            names.add(result);\n        }\n    } else {\n        throw new org.apache.avro.SchemaParseException(\"Type not supported: \" + type);\n    }\n    java.util.Iterator<java.lang.String> i = schema.getFieldNames();\n    while (i.hasNext()) {\n        // add properties\n        java.lang.String prop = i.next();\n        // ignore reserved\n        if (!org.apache.avro.Schema.SCHEMA_RESERVED.contains(prop)) {\n            result.addProp(prop, schema.get(prop));\n        }\n    } \n    // parse logical type if present\n    result.logicalType = org.apache.avro.LogicalTypes.fromSchemaIgnoreInvalid(result);\n    names.space(savedSpace);\n    // restore space\n    if (result instanceof org.apache.avro.Schema.NamedSchema) {\n        java.util.Set<java.lang.String> aliases = org.apache.avro.Schema.parseAliases(schema);\n        // add aliases\n        if (aliases != null) {\n            for (java.lang.String alias : aliases) {\n                result.addAlias(alias);\n            }\n        }\n    }\n    return result;\n} else if (schema.isArray()) {\n    // union\n    org.apache.avro.Schema.LockableArrayList<org.apache.avro.Schema> types = new org.apache.avro.Schema.LockableArrayList<>(schema.size());\n    for (org.codehaus.jackson.JsonNode typeNode : schema) {\n        types.add(org.apache.avro.Schema.parse(typeNode, names));\n    }\n    return new org.apache.avro.Schema.UnionSchema(types);\n} else {\n    throw new org.apache.avro.SchemaParseException(\"Schema not yet supported: \" + schema);\n}",
    "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
    "patched_lines": [1234]
}