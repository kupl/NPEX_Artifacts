{
    "contents": "(mirror != null ? mirror : null).accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null)",
    "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
    "patched_lines": [111]
}