[
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = new org.codehaus.jackson.JsonNode();\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyObject",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyObject_1228-1228_1--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": ""
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "org.apache.avro.Schema.parse(org.apache.avro.Schema.MAPPER.readTree(parser) != null ? org.apache.avro.Schema.MAPPER.readTree(parser) : new org.codehaus.jackson.JsonNode(), names)",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1036,
            "strategy": "ReplacePointerStrategyObject",
            "patch_id": "ReplacePointerStrategyObject_1035_0--2--2--2--2--2--2--2--2--2--2--2--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": ""
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    return null;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "SkipReturnParam",
            "patch_id": "SkipReturnParam_1228-1228_1"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema != null) {\n    if (schema.isTextual()) {\n        // name\n        org.apache.avro.Schema result = names.get(schema.getTextValue());\n        if (result == null) {\n            throw new org.apache.avro.SchemaParseException(\"Undefined name: \" + schema);\n        }\n        return result;\n    } else if (schema.isObject()) {\n        org.apache.avro.Schema result;\n        java.lang.String type = org.apache.avro.Schema.getRequiredText(schema, \"type\", \"No type\");\n        org.apache.avro.Schema.Name name = null;\n        java.lang.String savedSpace = names.space();\n        java.lang.String doc = null;\n        if (((type.equals(\"record\") || type.equals(\"error\")) || type.equals(\"enum\")) || type.equals(\"fixed\")) {\n            java.lang.String space = org.apache.avro.Schema.getOptionalText(schema, \"namespace\");\n            doc = org.apache.avro.Schema.getOptionalText(schema, \"doc\");\n            if (space == null) {\n                space = names.space();\n            }\n            name = new org.apache.avro.Schema.Name(org.apache.avro.Schema.getRequiredText(schema, \"name\", \"No name in schema\"), space);\n            if (name.space != null) {\n                // set default namespace\n                names.space(name.space);\n            }\n        }\n        if (org.apache.avro.Schema.PRIMITIVES.containsKey(type)) {\n            // primitive\n            result = org.apache.avro.Schema.create(org.apache.avro.Schema.PRIMITIVES.get(type));\n        } else if (type.equals(\"record\") || type.equals(\"error\")) {\n            // record\n            java.util.List<org.apache.avro.Schema.Field> fields = new java.util.ArrayList<>();\n            result = new org.apache.avro.Schema.RecordSchema(name, doc, type.equals(\"error\"));\n            if (name != null) {\n                names.add(result);\n            }\n            org.codehaus.jackson.JsonNode fieldsNode = schema.get(\"fields\");\n            if ((fieldsNode == null) || (!fieldsNode.isArray())) {\n                throw new org.apache.avro.SchemaParseException(\"Record has no fields: \" + schema);\n            }\n            for (org.codehaus.jackson.JsonNode field : fieldsNode) {\n                java.lang.String fieldName = org.apache.avro.Schema.getRequiredText(field, \"name\", \"No field name\");\n                java.lang.String fieldDoc = org.apache.avro.Schema.getOptionalText(field, \"doc\");\n                org.codehaus.jackson.JsonNode fieldTypeNode = field.get(\"type\");\n                if (fieldTypeNode == null) {\n                    throw new org.apache.avro.SchemaParseException(\"No field type: \" + field);\n                }\n                if (fieldTypeNode.isTextual() && (names.get(fieldTypeNode.getTextValue()) == null)) {\n                    throw new org.apache.avro.SchemaParseException(((((fieldTypeNode + \" is not a defined name.\") + \" The type of the \\\"\") + fieldName) + \"\\\" field must be\") + \" a defined name or a {\\\"type\\\": ...} expression.\");\n                }\n                org.apache.avro.Schema fieldSchema = org.apache.avro.Schema.parse(fieldTypeNode, names);\n                org.apache.avro.Schema.Field.Order order = org.apache.avro.Schema.Field.Order.ASCENDING;\n                org.codehaus.jackson.JsonNode orderNode = field.get(\"order\");\n                if (orderNode != null) {\n                    order = org.apache.avro.Schema.Field.Order.valueOf(orderNode.getTextValue().toUpperCase(java.util.Locale.ENGLISH));\n                }\n                org.codehaus.jackson.JsonNode defaultValue = field.get(\"default\");\n                if (((defaultValue != null) && (org.apache.avro.Schema.Type.FLOAT.equals(fieldSchema.getType()) || org.apache.avro.Schema.Type.DOUBLE.equals(fieldSchema.getType()))) && defaultValue.isTextual()) {\n                    defaultValue = new org.codehaus.jackson.node.DoubleNode(java.lang.Double.valueOf(defaultValue.getTextValue()));\n                }\n                org.apache.avro.Schema.Field f = new org.apache.avro.Schema.Field(fieldName, fieldSchema, fieldDoc, defaultValue, order);\n                java.util.Iterator<java.lang.String> i = field.getFieldNames();\n                while (i.hasNext()) {\n                    // add field props\n                    java.lang.String prop = i.next();\n                    if (!org.apache.avro.Schema.FIELD_RESERVED.contains(prop)) {\n                        f.addProp(prop, field.get(prop));\n                    }\n                } \n                f.aliases = org.apache.avro.Schema.parseAliases(field);\n                fields.add(f);\n            }\n            result.setFields(fields);\n        } else if (type.equals(\"enum\")) {\n            // enum\n            org.codehaus.jackson.JsonNode symbolsNode = schema.get(\"symbols\");\n            if ((symbolsNode == null) || (!symbolsNode.isArray())) {\n                throw new org.apache.avro.SchemaParseException(\"Enum has no symbols: \" + schema);\n            }\n            org.apache.avro.Schema.LockableArrayList<java.lang.String> symbols = new org.apache.avro.Schema.LockableArrayList<>(symbolsNode.size());\n            for (org.codehaus.jackson.JsonNode n : symbolsNode) {\n                symbols.add(n.getTextValue());\n            }\n            result = new org.apache.avro.Schema.EnumSchema(name, doc, symbols);\n            if (name != null) {\n                names.add(result);\n            }\n        } else if (type.equals(\"array\")) {\n            // array\n            org.codehaus.jackson.JsonNode itemsNode = schema.get(\"items\");\n            if (itemsNode == null) {\n                throw new org.apache.avro.SchemaParseException(\"Array has no items type: \" + schema);\n            }\n            result = new org.apache.avro.Schema.ArraySchema(org.apache.avro.Schema.parse(itemsNode, names));\n        } else if (type.equals(\"map\")) {\n            // map\n            org.codehaus.jackson.JsonNode valuesNode = schema.get(\"values\");\n            if (valuesNode == null) {\n                throw new org.apache.avro.SchemaParseException(\"Map has no values type: \" + schema);\n            }\n            result = new org.apache.avro.Schema.MapSchema(org.apache.avro.Schema.parse(valuesNode, names));\n        } else if (type.equals(\"fixed\")) {\n            // fixed\n            org.codehaus.jackson.JsonNode sizeNode = schema.get(\"size\");\n            if ((sizeNode == null) || (!sizeNode.isInt())) {\n                throw new org.apache.avro.SchemaParseException(\"Invalid or no size: \" + schema);\n            }\n            result = new org.apache.avro.Schema.FixedSchema(name, doc, sizeNode.getIntValue());\n            if (name != null) {\n                names.add(result);\n            }\n        } else {\n            throw new org.apache.avro.SchemaParseException(\"Type not supported: \" + type);\n        }\n        java.util.Iterator<java.lang.String> i = schema.getFieldNames();\n        while (i.hasNext()) {\n            // add properties\n            java.lang.String prop = i.next();\n            // ignore reserved\n            if (!org.apache.avro.Schema.SCHEMA_RESERVED.contains(prop)) {\n                result.addProp(prop, schema.get(prop));\n            }\n        } \n        // parse logical type if present\n        result.logicalType = org.apache.avro.LogicalTypes.fromSchemaIgnoreInvalid(result);\n        names.space(savedSpace);\n        // restore space\n        if (result instanceof org.apache.avro.Schema.NamedSchema) {\n            java.util.Set<java.lang.String> aliases = org.apache.avro.Schema.parseAliases(schema);\n            // add aliases\n            if (aliases != null) {\n                for (java.lang.String alias : aliases) {\n                    result.addAlias(alias);\n                }\n            }\n        }\n        return result;\n    } else if (schema.isArray()) {\n        // union\n        org.apache.avro.Schema.LockableArrayList<org.apache.avro.Schema> types = new org.apache.avro.Schema.LockableArrayList<>(schema.size());\n        for (org.codehaus.jackson.JsonNode typeNode : schema) {\n            types.add(org.apache.avro.Schema.parse(typeNode, names));\n        }\n        return new org.apache.avro.Schema.UnionSchema(types);\n    } else {\n        throw new org.apache.avro.SchemaParseException(\"Schema not yet supported: \" + schema);\n    }\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "SkipSinkStatementStrategy",
            "patch_id": "SkipSinkStatementStrategy_1228-1228_0"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (org.apache.avro.Schema.MAPPER.readTree(parser) != null) {\n    return org.apache.avro.Schema.parse(org.apache.avro.Schema.MAPPER.readTree(parser), names);\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1036,
            "strategy": "SkipSinkStatementStrategy",
            "patch_id": "SkipSinkStatementStrategy_1035-1035_1--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": ""
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (org.apache.avro.Schema.MAPPER.readTree(parser) == null) {\n    return null;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1036,
            "strategy": "SkipReturnStrategy",
            "patch_id": "SkipReturnStrategy_1035-1035_2--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": ""
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : new org.codehaus.jackson.JsonNode()).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyObject",
            "patch_id": "ReplacePointerStrategyObject_1228_0--6--6--6--7--6--6--6--6--4--4--4--4--6--6--4--4--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": ""
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    throw new org.apache.avro.SchemaParseException();\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "SkipThrowStrategy",
            "patch_id": "SkipThrowStrategy_1228-1228_0--8--7--7--7--7--5--5--5--5--7--7--5--5--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": ""
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (org.apache.avro.Schema.MAPPER.readTree(parser) != null) {\n    org.apache.avro.Schema.validateNames.set(validate);\n    org.apache.avro.Schema.VALIDATE_DEFAULTS.set(validateDefaults);\n    return org.apache.avro.Schema.parse(org.apache.avro.Schema.MAPPER.readTree(parser), names);\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1034,
            "strategy": "SkipBlockStrategy",
            "patch_id": "SkipBlockStrategy_1033-1035_0--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": ""
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema != null ? schema.isTextual() : true) {\n    // name\n    org.apache.avro.Schema result = names.get(schema.getTextValue());\n    if (result == null) {\n        throw new org.apache.avro.SchemaParseException(\"Undefined name: \" + schema);\n    }\n    return result;\n} else if (schema.isObject()) {\n    org.apache.avro.Schema result;\n    java.lang.String type = org.apache.avro.Schema.getRequiredText(schema, \"type\", \"No type\");\n    org.apache.avro.Schema.Name name = null;\n    java.lang.String savedSpace = names.space();\n    java.lang.String doc = null;\n    if (((type.equals(\"record\") || type.equals(\"error\")) || type.equals(\"enum\")) || type.equals(\"fixed\")) {\n        java.lang.String space = org.apache.avro.Schema.getOptionalText(schema, \"namespace\");\n        doc = org.apache.avro.Schema.getOptionalText(schema, \"doc\");\n        if (space == null) {\n            space = names.space();\n        }\n        name = new org.apache.avro.Schema.Name(org.apache.avro.Schema.getRequiredText(schema, \"name\", \"No name in schema\"), space);\n        if (name.space != null) {\n            // set default namespace\n            names.space(name.space);\n        }\n    }\n    if (org.apache.avro.Schema.PRIMITIVES.containsKey(type)) {\n        // primitive\n        result = org.apache.avro.Schema.create(org.apache.avro.Schema.PRIMITIVES.get(type));\n    } else if (type.equals(\"record\") || type.equals(\"error\")) {\n        // record\n        java.util.List<org.apache.avro.Schema.Field> fields = new java.util.ArrayList<>();\n        result = new org.apache.avro.Schema.RecordSchema(name, doc, type.equals(\"error\"));\n        if (name != null) {\n            names.add(result);\n        }\n        org.codehaus.jackson.JsonNode fieldsNode = schema.get(\"fields\");\n        if ((fieldsNode == null) || (!fieldsNode.isArray())) {\n            throw new org.apache.avro.SchemaParseException(\"Record has no fields: \" + schema);\n        }\n        for (org.codehaus.jackson.JsonNode field : fieldsNode) {\n            java.lang.String fieldName = org.apache.avro.Schema.getRequiredText(field, \"name\", \"No field name\");\n            java.lang.String fieldDoc = org.apache.avro.Schema.getOptionalText(field, \"doc\");\n            org.codehaus.jackson.JsonNode fieldTypeNode = field.get(\"type\");\n            if (fieldTypeNode == null) {\n                throw new org.apache.avro.SchemaParseException(\"No field type: \" + field);\n            }\n            if (fieldTypeNode.isTextual() && (names.get(fieldTypeNode.getTextValue()) == null)) {\n                throw new org.apache.avro.SchemaParseException(((((fieldTypeNode + \" is not a defined name.\") + \" The type of the \\\"\") + fieldName) + \"\\\" field must be\") + \" a defined name or a {\\\"type\\\": ...} expression.\");\n            }\n            org.apache.avro.Schema fieldSchema = org.apache.avro.Schema.parse(fieldTypeNode, names);\n            org.apache.avro.Schema.Field.Order order = org.apache.avro.Schema.Field.Order.ASCENDING;\n            org.codehaus.jackson.JsonNode orderNode = field.get(\"order\");\n            if (orderNode != null) {\n                order = org.apache.avro.Schema.Field.Order.valueOf(orderNode.getTextValue().toUpperCase(java.util.Locale.ENGLISH));\n            }\n            org.codehaus.jackson.JsonNode defaultValue = field.get(\"default\");\n            if (((defaultValue != null) && (org.apache.avro.Schema.Type.FLOAT.equals(fieldSchema.getType()) || org.apache.avro.Schema.Type.DOUBLE.equals(fieldSchema.getType()))) && defaultValue.isTextual()) {\n                defaultValue = new org.codehaus.jackson.node.DoubleNode(java.lang.Double.valueOf(defaultValue.getTextValue()));\n            }\n            org.apache.avro.Schema.Field f = new org.apache.avro.Schema.Field(fieldName, fieldSchema, fieldDoc, defaultValue, order);\n            java.util.Iterator<java.lang.String> i = field.getFieldNames();\n            while (i.hasNext()) {\n                // add field props\n                java.lang.String prop = i.next();\n                if (!org.apache.avro.Schema.FIELD_RESERVED.contains(prop)) {\n                    f.addProp(prop, field.get(prop));\n                }\n            } \n            f.aliases = org.apache.avro.Schema.parseAliases(field);\n            fields.add(f);\n        }\n        result.setFields(fields);\n    } else if (type.equals(\"enum\")) {\n        // enum\n        org.codehaus.jackson.JsonNode symbolsNode = schema.get(\"symbols\");\n        if ((symbolsNode == null) || (!symbolsNode.isArray())) {\n            throw new org.apache.avro.SchemaParseException(\"Enum has no symbols: \" + schema);\n        }\n        org.apache.avro.Schema.LockableArrayList<java.lang.String> symbols = new org.apache.avro.Schema.LockableArrayList<>(symbolsNode.size());\n        for (org.codehaus.jackson.JsonNode n : symbolsNode) {\n            symbols.add(n.getTextValue());\n        }\n        result = new org.apache.avro.Schema.EnumSchema(name, doc, symbols);\n        if (name != null) {\n            names.add(result);\n        }\n    } else if (type.equals(\"array\")) {\n        // array\n        org.codehaus.jackson.JsonNode itemsNode = schema.get(\"items\");\n        if (itemsNode == null) {\n            throw new org.apache.avro.SchemaParseException(\"Array has no items type: \" + schema);\n        }\n        result = new org.apache.avro.Schema.ArraySchema(org.apache.avro.Schema.parse(itemsNode, names));\n    } else if (type.equals(\"map\")) {\n        // map\n        org.codehaus.jackson.JsonNode valuesNode = schema.get(\"values\");\n        if (valuesNode == null) {\n            throw new org.apache.avro.SchemaParseException(\"Map has no values type: \" + schema);\n        }\n        result = new org.apache.avro.Schema.MapSchema(org.apache.avro.Schema.parse(valuesNode, names));\n    } else if (type.equals(\"fixed\")) {\n        // fixed\n        org.codehaus.jackson.JsonNode sizeNode = schema.get(\"size\");\n        if ((sizeNode == null) || (!sizeNode.isInt())) {\n            throw new org.apache.avro.SchemaParseException(\"Invalid or no size: \" + schema);\n        }\n        result = new org.apache.avro.Schema.FixedSchema(name, doc, sizeNode.getIntValue());\n        if (name != null) {\n            names.add(result);\n        }\n    } else {\n        throw new org.apache.avro.SchemaParseException(\"Type not supported: \" + type);\n    }\n    java.util.Iterator<java.lang.String> i = schema.getFieldNames();\n    while (i.hasNext()) {\n        // add properties\n        java.lang.String prop = i.next();\n        // ignore reserved\n        if (!org.apache.avro.Schema.SCHEMA_RESERVED.contains(prop)) {\n            result.addProp(prop, schema.get(prop));\n        }\n    } \n    // parse logical type if present\n    result.logicalType = org.apache.avro.LogicalTypes.fromSchemaIgnoreInvalid(result);\n    names.space(savedSpace);\n    // restore space\n    if (result instanceof org.apache.avro.Schema.NamedSchema) {\n        java.util.Set<java.lang.String> aliases = org.apache.avro.Schema.parseAliases(schema);\n        // add aliases\n        if (aliases != null) {\n            for (java.lang.String alias : aliases) {\n                result.addAlias(alias);\n            }\n        }\n    }\n    return result;\n} else if (schema.isArray()) {\n    // union\n    org.apache.avro.Schema.LockableArrayList<org.apache.avro.Schema> types = new org.apache.avro.Schema.LockableArrayList<>(schema.size());\n    for (org.codehaus.jackson.JsonNode typeNode : schema) {\n        types.add(org.apache.avro.Schema.parse(typeNode, names));\n    }\n    return new org.apache.avro.Schema.UnionSchema(types);\n} else {\n    throw new org.apache.avro.SchemaParseException(\"Schema not yet supported: \" + schema);\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplaceEntireExpressionStrategy",
            "patch_id": "ReplaceEntireExpressionStrategy_1228_3"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema != null ? schema.isTextual() : false) {\n    // name\n    org.apache.avro.Schema result = names.get(schema.getTextValue());\n    if (result == null) {\n        throw new org.apache.avro.SchemaParseException(\"Undefined name: \" + schema);\n    }\n    return result;\n} else if (schema.isObject()) {\n    org.apache.avro.Schema result;\n    java.lang.String type = org.apache.avro.Schema.getRequiredText(schema, \"type\", \"No type\");\n    org.apache.avro.Schema.Name name = null;\n    java.lang.String savedSpace = names.space();\n    java.lang.String doc = null;\n    if (((type.equals(\"record\") || type.equals(\"error\")) || type.equals(\"enum\")) || type.equals(\"fixed\")) {\n        java.lang.String space = org.apache.avro.Schema.getOptionalText(schema, \"namespace\");\n        doc = org.apache.avro.Schema.getOptionalText(schema, \"doc\");\n        if (space == null) {\n            space = names.space();\n        }\n        name = new org.apache.avro.Schema.Name(org.apache.avro.Schema.getRequiredText(schema, \"name\", \"No name in schema\"), space);\n        if (name.space != null) {\n            // set default namespace\n            names.space(name.space);\n        }\n    }\n    if (org.apache.avro.Schema.PRIMITIVES.containsKey(type)) {\n        // primitive\n        result = org.apache.avro.Schema.create(org.apache.avro.Schema.PRIMITIVES.get(type));\n    } else if (type.equals(\"record\") || type.equals(\"error\")) {\n        // record\n        java.util.List<org.apache.avro.Schema.Field> fields = new java.util.ArrayList<>();\n        result = new org.apache.avro.Schema.RecordSchema(name, doc, type.equals(\"error\"));\n        if (name != null) {\n            names.add(result);\n        }\n        org.codehaus.jackson.JsonNode fieldsNode = schema.get(\"fields\");\n        if ((fieldsNode == null) || (!fieldsNode.isArray())) {\n            throw new org.apache.avro.SchemaParseException(\"Record has no fields: \" + schema);\n        }\n        for (org.codehaus.jackson.JsonNode field : fieldsNode) {\n            java.lang.String fieldName = org.apache.avro.Schema.getRequiredText(field, \"name\", \"No field name\");\n            java.lang.String fieldDoc = org.apache.avro.Schema.getOptionalText(field, \"doc\");\n            org.codehaus.jackson.JsonNode fieldTypeNode = field.get(\"type\");\n            if (fieldTypeNode == null) {\n                throw new org.apache.avro.SchemaParseException(\"No field type: \" + field);\n            }\n            if (fieldTypeNode.isTextual() && (names.get(fieldTypeNode.getTextValue()) == null)) {\n                throw new org.apache.avro.SchemaParseException(((((fieldTypeNode + \" is not a defined name.\") + \" The type of the \\\"\") + fieldName) + \"\\\" field must be\") + \" a defined name or a {\\\"type\\\": ...} expression.\");\n            }\n            org.apache.avro.Schema fieldSchema = org.apache.avro.Schema.parse(fieldTypeNode, names);\n            org.apache.avro.Schema.Field.Order order = org.apache.avro.Schema.Field.Order.ASCENDING;\n            org.codehaus.jackson.JsonNode orderNode = field.get(\"order\");\n            if (orderNode != null) {\n                order = org.apache.avro.Schema.Field.Order.valueOf(orderNode.getTextValue().toUpperCase(java.util.Locale.ENGLISH));\n            }\n            org.codehaus.jackson.JsonNode defaultValue = field.get(\"default\");\n            if (((defaultValue != null) && (org.apache.avro.Schema.Type.FLOAT.equals(fieldSchema.getType()) || org.apache.avro.Schema.Type.DOUBLE.equals(fieldSchema.getType()))) && defaultValue.isTextual()) {\n                defaultValue = new org.codehaus.jackson.node.DoubleNode(java.lang.Double.valueOf(defaultValue.getTextValue()));\n            }\n            org.apache.avro.Schema.Field f = new org.apache.avro.Schema.Field(fieldName, fieldSchema, fieldDoc, defaultValue, order);\n            java.util.Iterator<java.lang.String> i = field.getFieldNames();\n            while (i.hasNext()) {\n                // add field props\n                java.lang.String prop = i.next();\n                if (!org.apache.avro.Schema.FIELD_RESERVED.contains(prop)) {\n                    f.addProp(prop, field.get(prop));\n                }\n            } \n            f.aliases = org.apache.avro.Schema.parseAliases(field);\n            fields.add(f);\n        }\n        result.setFields(fields);\n    } else if (type.equals(\"enum\")) {\n        // enum\n        org.codehaus.jackson.JsonNode symbolsNode = schema.get(\"symbols\");\n        if ((symbolsNode == null) || (!symbolsNode.isArray())) {\n            throw new org.apache.avro.SchemaParseException(\"Enum has no symbols: \" + schema);\n        }\n        org.apache.avro.Schema.LockableArrayList<java.lang.String> symbols = new org.apache.avro.Schema.LockableArrayList<>(symbolsNode.size());\n        for (org.codehaus.jackson.JsonNode n : symbolsNode) {\n            symbols.add(n.getTextValue());\n        }\n        result = new org.apache.avro.Schema.EnumSchema(name, doc, symbols);\n        if (name != null) {\n            names.add(result);\n        }\n    } else if (type.equals(\"array\")) {\n        // array\n        org.codehaus.jackson.JsonNode itemsNode = schema.get(\"items\");\n        if (itemsNode == null) {\n            throw new org.apache.avro.SchemaParseException(\"Array has no items type: \" + schema);\n        }\n        result = new org.apache.avro.Schema.ArraySchema(org.apache.avro.Schema.parse(itemsNode, names));\n    } else if (type.equals(\"map\")) {\n        // map\n        org.codehaus.jackson.JsonNode valuesNode = schema.get(\"values\");\n        if (valuesNode == null) {\n            throw new org.apache.avro.SchemaParseException(\"Map has no values type: \" + schema);\n        }\n        result = new org.apache.avro.Schema.MapSchema(org.apache.avro.Schema.parse(valuesNode, names));\n    } else if (type.equals(\"fixed\")) {\n        // fixed\n        org.codehaus.jackson.JsonNode sizeNode = schema.get(\"size\");\n        if ((sizeNode == null) || (!sizeNode.isInt())) {\n            throw new org.apache.avro.SchemaParseException(\"Invalid or no size: \" + schema);\n        }\n        result = new org.apache.avro.Schema.FixedSchema(name, doc, sizeNode.getIntValue());\n        if (name != null) {\n            names.add(result);\n        }\n    } else {\n        throw new org.apache.avro.SchemaParseException(\"Type not supported: \" + type);\n    }\n    java.util.Iterator<java.lang.String> i = schema.getFieldNames();\n    while (i.hasNext()) {\n        // add properties\n        java.lang.String prop = i.next();\n        // ignore reserved\n        if (!org.apache.avro.Schema.SCHEMA_RESERVED.contains(prop)) {\n            result.addProp(prop, schema.get(prop));\n        }\n    } \n    // parse logical type if present\n    result.logicalType = org.apache.avro.LogicalTypes.fromSchemaIgnoreInvalid(result);\n    names.space(savedSpace);\n    // restore space\n    if (result instanceof org.apache.avro.Schema.NamedSchema) {\n        java.util.Set<java.lang.String> aliases = org.apache.avro.Schema.parseAliases(schema);\n        // add aliases\n        if (aliases != null) {\n            for (java.lang.String alias : aliases) {\n                result.addAlias(alias);\n            }\n        }\n    }\n    return result;\n} else if (schema.isArray()) {\n    // union\n    org.apache.avro.Schema.LockableArrayList<org.apache.avro.Schema> types = new org.apache.avro.Schema.LockableArrayList<>(schema.size());\n    for (org.codehaus.jackson.JsonNode typeNode : schema) {\n        types.add(org.apache.avro.Schema.parse(typeNode, names));\n    }\n    return new org.apache.avro.Schema.UnionSchema(types);\n} else {\n    throw new org.apache.avro.SchemaParseException(\"Schema not yet supported: \" + schema);\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplaceEntireExpressionStrategy",
            "patch_id": "ReplaceEntireExpressionStrategy_1228_2"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : n).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_1228_6--12--9--9--9--9--6--6--6--6--9--9--6--6--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : defaultValue).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_1228_4--13--10--10--10--10--7--7--7--7--10--10--7--7--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = symbolsNode;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_1228-1228_6--14--11--11--11--11--8--8--8--8--11--11--8--8--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = field;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_1228-1228_2--15--12--12--12--12--9--9--9--9--12--12--9--9--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : itemsNode).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_1228_7--16--13--13--13--13--10--10--10--10--13--13--10--10--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : valuesNode).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_1228_8--17--14--14--14--14--11--11--11--11--14--14--11--11--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : fieldTypeNode).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_1228_2--18--15--15--15--15--12--12--12--12--15--15--12--12--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = fieldsNode;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_1228-1228_1--19--16--16--16--16--13--13--13--13--16--16--13--13--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : typeNode).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_1228_10--20--17--17--17--17--14--14--14--14--17--17--14--14--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : field).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_1228_1--21--18--18--18--18--15--15--15--15--18--18--15--15--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = typeNode;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_1228-1228_11--22--19--19--19--19--16--16--16--16--19--19--16--16--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = fieldTypeNode;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_1228-1228_3--23--20--20--20--20--17--17--17--17--20--20--17--17--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : fieldsNode).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_1228_0--24--21--21--21--21--18--18--18--18--21--21--18--18--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = orderNode;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_1228-1228_4--25--22--22--22--22--19--19--19--19--22--22--19--19--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = itemsNode;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_1228-1228_8--26--23--23--23--23--20--20--20--20--23--23--20--20--23--23--23--23--23--23--23--23--23--23--23--23--23--23--23--23--23"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = sizeNode;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_1228-1228_10--27--24--24--24--24--21--21--21--21--24--24--21--21--24--24--24--24--24--24--24--24--24--24--24--24--24--24--24--24--24"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : symbolsNode).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_1228_5--28--25--25--25--25--22--22--22--22--25--25--22--22--25--25--25--25--25--25--25--25--25--25--25--25--25--25--25--25--25"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : sizeNode).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_1228_9--29--26--26--26--26--23--23--23--23--26--26--23--23--26--26--26--26--26--26--26--26--26--26--26--26--26--26--26--26--26"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = n;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_1228-1228_7--30--27--27--27--27--24--24--24--24--27--27--24--24--27--27--27--27--27--27--27--27--27--27--27--27--27--27--27--27--27"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = defaultValue;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_1228-1228_5--31--28--28--28--28--25--25--25--25--28--28--25--25--28--28--28--28--28--28--28--28--28--28--28--28--28--28--28--28--28"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : orderNode).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_1228_3--32--29--29--29--29--26--26--26--26--29--29--26--26--29--29--29--29--29--29--29--29--29--29--29--29--29--29--29--29--29"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = valuesNode;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_1228-1228_9--33--30--30--30--30--27--27--27--27--30--30--27--27--30--30--30--30--30--30--30--30--30--30--30--30--30--30--30--30--30"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    throw new org.apache.avro.SchemaParseException(\"\");\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "SkipThrowStrategy",
            "patch_id": "SkipThrowStrategy_1228-1228_3"
        },
        "label": "LabelOverall.CORRECT",
        "detail": "LabelDetail.MANUAL_CORRECT",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "return org.apache.avro.Schema.MAPPER.readTree(parser) != null ? org.apache.avro.Schema.parse(org.apache.avro.Schema.MAPPER.readTree(parser), names) : null",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1036,
            "strategy": "ReplaceEntireExpressionStrategy",
            "patch_id": "ReplaceEntireExpressionStrategy_1035_0--31--31--31--31--31--31--31--31--31--31--31--31--31--31--31--31--31"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "(schema != null ? schema : null).isTextual()",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "ReplacePointerStrategy",
            "patch_id": "ReplacePointerStrategy_1228_0"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.MANUAL_INCORRECT",
        "description": null
    },
    {
        "bug_id": "avro_a7a43da",
        "patch": {
            "contents": "if (schema == null) {\n    schema = null;\n}",
            "original_filepath": "lang/java/avro/src/main/java/org/apache/avro/Schema.java",
            "patched_line": 1234,
            "strategy": "InitPointerStrategy",
            "patch_id": "InitPointerStrategy_1228-1228_2"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.MANUAL_INCORRECT",
        "description": null
    }
]