[
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror != null) {\n    return mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n        @java.lang.Override\n        public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n            switch (t.getKind()) {\n                case BOOLEAN :\n                    return com.squareup.javapoet.TypeName.BOOLEAN;\n                case BYTE :\n                    return com.squareup.javapoet.TypeName.BYTE;\n                case SHORT :\n                    return com.squareup.javapoet.TypeName.SHORT;\n                case INT :\n                    return com.squareup.javapoet.TypeName.INT;\n                case LONG :\n                    return com.squareup.javapoet.TypeName.LONG;\n                case CHAR :\n                    return com.squareup.javapoet.TypeName.CHAR;\n                case FLOAT :\n                    return com.squareup.javapoet.TypeName.FLOAT;\n                case DOUBLE :\n                    return com.squareup.javapoet.TypeName.DOUBLE;\n                default :\n                    throw new java.lang.AssertionError();\n            }\n        }\n\n        @java.lang.Override\n        public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n            com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n            if (t.getTypeArguments().isEmpty()) {\n                return rawType;\n            }\n            java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n            for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n                typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n            }\n            return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n        }\n\n        @java.lang.Override\n        public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n            return com.squareup.javapoet.ArrayTypeName.get(t);\n        }\n\n        @java.lang.Override\n        public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n            return com.squareup.javapoet.TypeVariableName.get(t);\n        }\n\n        @java.lang.Override\n        public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n            return com.squareup.javapoet.WildcardTypeName.get(t);\n        }\n\n        @java.lang.Override\n        public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n            if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n                return com.squareup.javapoet.TypeName.VOID;\n            }\n            return super.visitUnknown(t, p);\n        }\n\n        @java.lang.Override\n        protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n            throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n        }\n    }, null);\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "SkipSinkStatementStrategy",
            "patch_id": "SkipSinkStatementStrategy_107-107_0"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror == null) {\n    return null;\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "SkipReturnParam",
            "patch_id": "SkipReturnParam_107-107_1"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.MANUAL_INCORRECT",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror == null) {\n    throw new java.lang.IllegalArgumentException();\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "SkipThrowStrategy",
            "patch_id": "SkipThrowStrategy_107-107_5"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : new com.squareup.javapoet.TypeName()",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyObject",
            "patch_id": "ReplaceEntireExpressionStrategy_107_3"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror == null) {\n    throw new java.lang.AssertionError();\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "SkipThrowStrategy",
            "patch_id": "SkipThrowStrategy_107-107_4"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : null",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategy",
            "patch_id": "ReplaceEntireExpressionStrategy_107_2"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.MANUAL_INCORRECT",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : com.squareup.javapoet.TypeName.CHAR",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyVar",
            "patch_id": "ReplaceEntireExpressionStrategyVar_107_15--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2--2"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "(mirror != null ? mirror : e).accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null)",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_107_6--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3--3"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : com.squareup.javapoet.TypeName.INT",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyVar",
            "patch_id": "ReplaceEntireExpressionStrategyVar_107_13--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4--4"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : com.squareup.javapoet.TypeName.SHORT",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyVar",
            "patch_id": "ReplaceEntireExpressionStrategyVar_107_12--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5--5"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "(mirror != null ? mirror : t).accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null)",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplacePointerStrategyVar",
            "patch_id": "ReplacePointerStrategyVar_107_0--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6--6"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : rawType",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyVar",
            "patch_id": "ReplaceEntireExpressionStrategyVar_107_8--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7--7"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror == null) {\n    mirror = e;\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_107-107_8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8--8"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror == null) {\n    mirror = t;\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "npex.synthesizer.strategy.InitPointerStrategyVar",
            "patch_id": "npex.synthesizer.strategy.InitPointerStrategyVar_107-107_2--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9--9"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : com.squareup.javapoet.TypeName.BYTE",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyVar",
            "patch_id": "ReplaceEntireExpressionStrategyVar_107_11--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10--10"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : com.squareup.javapoet.TypeName.OBJECT",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyVar",
            "patch_id": "ReplaceEntireExpressionStrategyVar_107_18--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11--11"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : com.squareup.javapoet.TypeName.FLOAT",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyVar",
            "patch_id": "ReplaceEntireExpressionStrategyVar_107_16--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12--12"
        },
        "label": "LabelOverall.TIMEOUT",
        "detail": "LabelDetail.TIMEOUT",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : com.squareup.javapoet.TypeName.BOOLEAN",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyVar",
            "patch_id": "ReplaceEntireExpressionStrategyVar_107_10--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13--13"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : com.squareup.javapoet.TypeName.LONG",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyVar",
            "patch_id": "ReplaceEntireExpressionStrategyVar_107_14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14--14"
        },
        "label": "LabelOverall.TIMEOUT",
        "detail": "LabelDetail.TIMEOUT",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : com.squareup.javapoet.TypeName.VOID",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyVar",
            "patch_id": "ReplaceEntireExpressionStrategyVar_107_9--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15--15"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "return mirror != null ? mirror.accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null) : com.squareup.javapoet.TypeName.DOUBLE",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplaceEntireExpressionStrategyVar",
            "patch_id": "ReplaceEntireExpressionStrategyVar_107_17--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16--16"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (types.getWildcardType(charSequence, null) == null) {\n    return;\n}",
            "original_filepath": "src/test/java/com/squareup/javapoet/TypesTest.java",
            "patched_line": 174,
            "strategy": "SkipReturnStrategy",
            "patch_id": "SkipReturnStrategy_173-173_1--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17--17"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (types.getWildcardType(charSequence, null) != null) {\n    javax.lang.model.type.WildcardType wildcard = types.getWildcardType(charSequence, null);\n}",
            "original_filepath": "src/test/java/com/squareup/javapoet/TypesTest.java",
            "patched_line": 174,
            "strategy": "SkipSinkStatementStrategy",
            "patch_id": "SkipSinkStatementStrategy_173-173_0--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18--18"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror.getSuperBound() != null) {\n    com.squareup.javapoet.TypeName superBound = com.squareup.javapoet.TypeName.get(mirror.getSuperBound());\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/WildcardTypeName.java",
            "patched_line": 94,
            "strategy": "SkipSinkStatementStrategy",
            "patch_id": "SkipSinkStatementStrategy_93-93_0--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19--19"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "com.squareup.javapoet.TypeName extendsBound = (mirror.getExtendsBound() != null) ? com.squareup.javapoet.TypeName.get(mirror.getExtendsBound()) : null",
            "original_filepath": "src/main/java/com/squareup/javapoet/WildcardTypeName.java",
            "patched_line": 93,
            "strategy": "ReplaceEntireExpressionStrategy",
            "patch_id": "ReplaceEntireExpressionStrategy_92_2"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "com.squareup.javapoet.TypeName type = (wildcard != null) ? com.squareup.javapoet.TypeName.get(wildcard) : new com.squareup.javapoet.TypeName()",
            "original_filepath": "src/test/java/com/squareup/javapoet/TypesTest.java",
            "patched_line": 184,
            "strategy": "ReplaceEntireExpressionStrategy",
            "patch_id": "ReplaceEntireExpressionStrategy_183_3"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (types.getWildcardType(null, string) != null) {\n    javax.lang.model.type.WildcardType wildcard = types.getWildcardType(null, string);\n}",
            "original_filepath": "src/test/java/com/squareup/javapoet/TypesTest.java",
            "patched_line": 183,
            "strategy": "SkipSinkStatementStrategy",
            "patch_id": "SkipSinkStatementStrategy_182-182_0"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "com.squareup.javapoet.TypeName extendsBound = (mirror.getExtendsBound() != null) ? com.squareup.javapoet.TypeName.get(mirror.getExtendsBound()) : new com.squareup.javapoet.TypeName()",
            "original_filepath": "src/main/java/com/squareup/javapoet/WildcardTypeName.java",
            "patched_line": 93,
            "strategy": "ReplaceEntireExpressionStrategy",
            "patch_id": "ReplaceEntireExpressionStrategy_92_3"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "com.squareup.javapoet.TypeName type = (wildcard != null) ? com.squareup.javapoet.TypeName.get(wildcard) : null",
            "original_filepath": "src/test/java/com/squareup/javapoet/TypesTest.java",
            "patched_line": 184,
            "strategy": "ReplaceEntireExpressionStrategy",
            "patch_id": "ReplaceEntireExpressionStrategy_183_2"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "javax.lang.model.type.WildcardType wildcard = (types.getWildcardType(null, string) != null) ? types.getWildcardType(null, string) : null",
            "original_filepath": "src/test/java/com/squareup/javapoet/TypesTest.java",
            "patched_line": 183,
            "strategy": "ReplaceEntireExpressionStrategy",
            "patch_id": "ReplacePointerStrategy_182_0"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror.getExtendsBound() == null) {\n    return null;\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/WildcardTypeName.java",
            "patched_line": 93,
            "strategy": "SkipReturnStrategy",
            "patch_id": "SkipReturnStrategy_92-92_1"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror.getExtendsBound() != null) {\n    com.squareup.javapoet.TypeName extendsBound = com.squareup.javapoet.TypeName.get(mirror.getExtendsBound());\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/WildcardTypeName.java",
            "patched_line": 93,
            "strategy": "SkipSinkStatementStrategy",
            "patch_id": "SkipSinkStatementStrategy_92-92_0"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "com.squareup.javapoet.TypeName superBound = (mirror.getSuperBound() != null) ? com.squareup.javapoet.TypeName.get(mirror.getSuperBound()) : new com.squareup.javapoet.TypeName()",
            "original_filepath": "src/main/java/com/squareup/javapoet/WildcardTypeName.java",
            "patched_line": 94,
            "strategy": "ReplaceEntireExpressionStrategy",
            "patch_id": "ReplaceEntireExpressionStrategy_93_2--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20--20"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "com.squareup.javapoet.TypeName superBound = (mirror.getSuperBound() != null) ? com.squareup.javapoet.TypeName.get(mirror.getSuperBound()) : null",
            "original_filepath": "src/main/java/com/squareup/javapoet/WildcardTypeName.java",
            "patched_line": 94,
            "strategy": "ReplaceEntireExpressionStrategy",
            "patch_id": "ReplaceEntireExpressionStrategy_93_0--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21--21"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TODO",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (types.getWildcardType(null, string) == null) {\n    return;\n}",
            "original_filepath": "src/test/java/com/squareup/javapoet/TypesTest.java",
            "patched_line": 183,
            "strategy": "SkipReturnStrategy",
            "patch_id": "SkipReturnStrategy_182-182_1"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (wildcard == null) {\n    return;\n}",
            "original_filepath": "src/test/java/com/squareup/javapoet/TypesTest.java",
            "patched_line": 184,
            "strategy": "SkipReturnStrategy",
            "patch_id": "SkipReturnStrategy_183-183_2"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (wildcard != null) {\n    com.squareup.javapoet.TypeName type = com.squareup.javapoet.TypeName.get(wildcard);\n}",
            "original_filepath": "src/test/java/com/squareup/javapoet/TypesTest.java",
            "patched_line": 184,
            "strategy": "SkipSinkStatementStrategy",
            "patch_id": "SkipSinkStatementStrategy_183-183_0"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.COMPILE_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror.getSuperBound() == null) {\n    return null;\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/WildcardTypeName.java",
            "patched_line": 94,
            "strategy": "SkipReturnStrategy",
            "patch_id": "SkipReturnStrategy_93-93_1--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22--22"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror == null) {\n    return new com.squareup.javapoet.TypeName();\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "SkipReturnParam",
            "patch_id": "SkipReturnParam_107-107_2"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror.getExtendsBound() == null) {\n    return new com.squareup.javapoet.TypeName();\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/WildcardTypeName.java",
            "patched_line": 93,
            "strategy": "SkipReturnStrategy",
            "patch_id": "SkipReturnStrategy_92-92_2"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (mirror == null) {\n    mirror = null;\n}",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "InitPointerStrategy",
            "patch_id": "InitPointerStrategy_107-107_3"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "com.squareup.javapoet.TypeName.get(mirror.getExtendsBound() != null ? mirror.getExtendsBound() : null)",
            "original_filepath": "src/main/java/com/squareup/javapoet/WildcardTypeName.java",
            "patched_line": 93,
            "strategy": "ReplacePointerStrategy",
            "patch_id": "ReplacePointerStrategy_92_0"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "if (wildcard == null) {\n    wildcard = null;\n}",
            "original_filepath": "src/test/java/com/squareup/javapoet/TypesTest.java",
            "patched_line": 184,
            "strategy": "InitPointerStrategy",
            "patch_id": "InitPointerStrategy_183-183_1"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.MANUAL_INCORRECT",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "(mirror != null ? mirror : null).accept(new javax.lang.model.util.SimpleTypeVisitor7<com.squareup.javapoet.TypeName, java.lang.Void>() {\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitPrimitive(javax.lang.model.type.PrimitiveType t, java.lang.Void p) {\n        switch (t.getKind()) {\n            case BOOLEAN :\n                return com.squareup.javapoet.TypeName.BOOLEAN;\n            case BYTE :\n                return com.squareup.javapoet.TypeName.BYTE;\n            case SHORT :\n                return com.squareup.javapoet.TypeName.SHORT;\n            case INT :\n                return com.squareup.javapoet.TypeName.INT;\n            case LONG :\n                return com.squareup.javapoet.TypeName.LONG;\n            case CHAR :\n                return com.squareup.javapoet.TypeName.CHAR;\n            case FLOAT :\n                return com.squareup.javapoet.TypeName.FLOAT;\n            case DOUBLE :\n                return com.squareup.javapoet.TypeName.DOUBLE;\n            default :\n                throw new java.lang.AssertionError();\n        }\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType t, java.lang.Void p) {\n        com.squareup.javapoet.ClassName rawType = com.squareup.javapoet.ClassName.get(((javax.lang.model.element.TypeElement) (t.asElement())));\n        if (t.getTypeArguments().isEmpty()) {\n            return rawType;\n        }\n        java.util.List<com.squareup.javapoet.TypeName> typeArgumentNames = new java.util.ArrayList<>();\n        for (javax.lang.model.type.TypeMirror mirror : t.getTypeArguments()) {\n            typeArgumentNames.add(com.squareup.javapoet.TypeName.get(mirror));\n        }\n        return new com.squareup.javapoet.ParameterizedTypeName(rawType, typeArgumentNames);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.ArrayTypeName visitArray(javax.lang.model.type.ArrayType t, java.lang.Void p) {\n        return com.squareup.javapoet.ArrayTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitTypeVariable(javax.lang.model.type.TypeVariable t, java.lang.Void p) {\n        return com.squareup.javapoet.TypeVariableName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitWildcard(javax.lang.model.type.WildcardType t, java.lang.Void p) {\n        return com.squareup.javapoet.WildcardTypeName.get(t);\n    }\n\n    @java.lang.Override\n    public com.squareup.javapoet.TypeName visitNoType(javax.lang.model.type.NoType t, java.lang.Void p) {\n        if (t.getKind() == javax.lang.model.type.TypeKind.VOID) {\n            return com.squareup.javapoet.TypeName.VOID;\n        }\n        return super.visitUnknown(t, p);\n    }\n\n    @java.lang.Override\n    protected com.squareup.javapoet.TypeName defaultAction(javax.lang.model.type.TypeMirror e, java.lang.Void p) {\n        throw new java.lang.IllegalArgumentException(\"Unexpected type mirror: \" + e);\n    }\n}, null)",
            "original_filepath": "src/main/java/com/squareup/javapoet/TypeName.java",
            "patched_line": 111,
            "strategy": "ReplacePointerStrategy",
            "patch_id": "ReplacePointerStrategy_107_0"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.MANUAL_INCORRECT",
        "description": null
    },
    {
        "bug_id": "javapoet-70b38e5-buggy",
        "patch": {
            "contents": "com.squareup.javapoet.TypeName.get(wildcard != null ? wildcard : null)",
            "original_filepath": "src/test/java/com/squareup/javapoet/TypesTest.java",
            "patched_line": 184,
            "strategy": "ReplacePointerStrategy",
            "patch_id": "ReplacePointerStrategy_183_0"
        },
        "label": "LabelOverall.OVERFITTING",
        "detail": "LabelDetail.TEST_FAIL",
        "description": null
    }
]